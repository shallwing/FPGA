// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/10/2021 14:01:19"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    beep
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module beep_vlg_sample_tst(
	clk,
	rst,
	sampler_tx
);
input  clk;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(clk or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module beep_vlg_check_tst (
	beep,
	cnt,
	cnt_500ms,
	freq_cnt,
	freq_data,
	sampler_rx
);
input  beep;
input [24:0] cnt;
input [2:0] cnt_500ms;
input [17:0] freq_cnt;
input [17:0] freq_data;
input sampler_rx;

reg  beep_expected;
reg [24:0] cnt_expected;
reg [2:0] cnt_500ms_expected;
reg [17:0] freq_cnt_expected;
reg [17:0] freq_data_expected;

reg  beep_prev;
reg [24:0] cnt_prev;
reg [2:0] cnt_500ms_prev;
reg [17:0] freq_cnt_prev;
reg [17:0] freq_data_prev;

reg  beep_expected_prev;
reg [24:0] cnt_expected_prev;
reg [2:0] cnt_500ms_expected_prev;
reg [17:0] freq_cnt_expected_prev;
reg [17:0] freq_data_expected_prev;

reg  last_beep_exp;
reg [24:0] last_cnt_exp;
reg [2:0] last_cnt_500ms_exp;
reg [17:0] last_freq_cnt_exp;
reg [17:0] last_freq_data_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	beep_prev = beep;
	cnt_prev = cnt;
	cnt_500ms_prev = cnt_500ms;
	freq_cnt_prev = freq_cnt;
	freq_data_prev = freq_data;
end

// update expected /o prevs

always @(trigger)
begin
	beep_expected_prev = beep_expected;
	cnt_expected_prev = cnt_expected;
	cnt_500ms_expected_prev = cnt_500ms_expected;
	freq_cnt_expected_prev = freq_cnt_expected;
	freq_data_expected_prev = freq_data_expected;
end


// expected cnt[ 24 ]
initial
begin
	cnt_expected[24] = 1'bX;
	cnt_expected[24] = #999000 1'b0;
end 
// expected cnt[ 23 ]
initial
begin
	cnt_expected[23] = 1'bX;
	cnt_expected[23] = #999000 1'b0;
end 
// expected cnt[ 22 ]
initial
begin
	cnt_expected[22] = 1'bX;
	cnt_expected[22] = #999000 1'b0;
end 
// expected cnt[ 21 ]
initial
begin
	cnt_expected[21] = 1'bX;
	cnt_expected[21] = #999000 1'b0;
end 
// expected cnt[ 20 ]
initial
begin
	cnt_expected[20] = 1'bX;
	cnt_expected[20] = #999000 1'b0;
end 
// expected cnt[ 19 ]
initial
begin
	cnt_expected[19] = 1'bX;
	cnt_expected[19] = #999000 1'b0;
end 
// expected cnt[ 18 ]
initial
begin
	cnt_expected[18] = 1'bX;
	cnt_expected[18] = #999000 1'b0;
end 
// expected cnt[ 17 ]
initial
begin
	cnt_expected[17] = 1'bX;
	cnt_expected[17] = #999000 1'b0;
end 
// expected cnt[ 16 ]
initial
begin
	cnt_expected[16] = 1'bX;
	cnt_expected[16] = #999000 1'b0;
end 
// expected cnt[ 15 ]
initial
begin
	cnt_expected[15] = 1'bX;
	cnt_expected[15] = #999000 1'b0;
end 
// expected cnt[ 14 ]
initial
begin
	cnt_expected[14] = 1'bX;
	cnt_expected[14] = #999000 1'b0;
end 
// expected cnt[ 13 ]
initial
begin
	cnt_expected[13] = 1'bX;
	cnt_expected[13] = #999000 1'b0;
end 
// expected cnt[ 12 ]
initial
begin
	cnt_expected[12] = 1'bX;
	cnt_expected[12] = #999000 1'b0;
end 
// expected cnt[ 11 ]
initial
begin
	cnt_expected[11] = 1'bX;
	cnt_expected[11] = #999000 1'b0;
end 
// expected cnt[ 10 ]
initial
begin
	cnt_expected[10] = 1'bX;
	cnt_expected[10] = #999000 1'b0;
end 
// expected cnt[ 9 ]
initial
begin
	cnt_expected[9] = 1'bX;
	cnt_expected[9] = #999000 1'b0;
end 
// expected cnt[ 8 ]
initial
begin
	cnt_expected[8] = 1'bX;
	cnt_expected[8] = #999000 1'b0;
end 
// expected cnt[ 7 ]
initial
begin
	cnt_expected[7] = 1'bX;
	cnt_expected[7] = #999000 1'b0;
end 
// expected cnt[ 6 ]
initial
begin
	cnt_expected[6] = 1'bX;
	cnt_expected[6] = #999000 1'b0;
end 
// expected cnt[ 5 ]
initial
begin
	cnt_expected[5] = 1'bX;
	cnt_expected[5] = #999000 1'b0;
end 
// expected cnt[ 4 ]
initial
begin
	cnt_expected[4] = 1'bX;
	cnt_expected[4] = #999000 1'b0;
end 
// expected cnt[ 3 ]
initial
begin
	cnt_expected[3] = 1'bX;
	cnt_expected[3] = #999000 1'b0;
end 
// expected cnt[ 2 ]
initial
begin
	cnt_expected[2] = 1'bX;
	cnt_expected[2] = #999000 1'b0;
end 
// expected cnt[ 1 ]
initial
begin
	cnt_expected[1] = 1'bX;
	cnt_expected[1] = #999000 1'b0;
end 
// expected cnt[ 0 ]
initial
begin
	cnt_expected[0] = 1'bX;
	cnt_expected[0] = #999000 1'b0;
end 
// expected cnt_500ms[ 2 ]
initial
begin
	cnt_500ms_expected[2] = 1'bX;
	cnt_500ms_expected[2] = #999000 1'b0;
end 
// expected cnt_500ms[ 1 ]
initial
begin
	cnt_500ms_expected[1] = 1'bX;
	cnt_500ms_expected[1] = #999000 1'b0;
end 
// expected cnt_500ms[ 0 ]
initial
begin
	cnt_500ms_expected[0] = 1'bX;
	cnt_500ms_expected[0] = #999000 1'b0;
end 
// expected freq_cnt[ 17 ]
initial
begin
	freq_cnt_expected[17] = 1'bX;
	freq_cnt_expected[17] = #999000 1'b0;
end 
// expected freq_cnt[ 16 ]
initial
begin
	freq_cnt_expected[16] = 1'bX;
	freq_cnt_expected[16] = #999000 1'b0;
end 
// expected freq_cnt[ 15 ]
initial
begin
	freq_cnt_expected[15] = 1'bX;
	freq_cnt_expected[15] = #999000 1'b0;
end 
// expected freq_cnt[ 14 ]
initial
begin
	freq_cnt_expected[14] = 1'bX;
	freq_cnt_expected[14] = #999000 1'b0;
end 
// expected freq_cnt[ 13 ]
initial
begin
	freq_cnt_expected[13] = 1'bX;
	freq_cnt_expected[13] = #999000 1'b0;
end 
// expected freq_cnt[ 12 ]
initial
begin
	freq_cnt_expected[12] = 1'bX;
	freq_cnt_expected[12] = #999000 1'b0;
end 
// expected freq_cnt[ 11 ]
initial
begin
	freq_cnt_expected[11] = 1'bX;
	freq_cnt_expected[11] = #999000 1'b0;
end 
// expected freq_cnt[ 10 ]
initial
begin
	freq_cnt_expected[10] = 1'bX;
	freq_cnt_expected[10] = #999000 1'b0;
end 
// expected freq_cnt[ 9 ]
initial
begin
	freq_cnt_expected[9] = 1'bX;
	freq_cnt_expected[9] = #999000 1'b0;
end 
// expected freq_cnt[ 8 ]
initial
begin
	freq_cnt_expected[8] = 1'bX;
	freq_cnt_expected[8] = #999000 1'b0;
end 
// expected freq_cnt[ 7 ]
initial
begin
	freq_cnt_expected[7] = 1'bX;
	freq_cnt_expected[7] = #999000 1'b0;
end 
// expected freq_cnt[ 6 ]
initial
begin
	freq_cnt_expected[6] = 1'bX;
	freq_cnt_expected[6] = #999000 1'b0;
end 
// expected freq_cnt[ 5 ]
initial
begin
	freq_cnt_expected[5] = 1'bX;
	freq_cnt_expected[5] = #999000 1'b0;
end 
// expected freq_cnt[ 4 ]
initial
begin
	freq_cnt_expected[4] = 1'bX;
	freq_cnt_expected[4] = #999000 1'b0;
end 
// expected freq_cnt[ 3 ]
initial
begin
	freq_cnt_expected[3] = 1'bX;
	freq_cnt_expected[3] = #999000 1'b0;
end 
// expected freq_cnt[ 2 ]
initial
begin
	freq_cnt_expected[2] = 1'bX;
	freq_cnt_expected[2] = #999000 1'b0;
end 
// expected freq_cnt[ 1 ]
initial
begin
	freq_cnt_expected[1] = 1'bX;
	freq_cnt_expected[1] = #999000 1'b0;
end 
// expected freq_cnt[ 0 ]
initial
begin
	freq_cnt_expected[0] = 1'bX;
	freq_cnt_expected[0] = #999000 1'b0;
end 
// expected freq_data[ 17 ]
initial
begin
	freq_data_expected[17] = 1'bX;
	freq_data_expected[17] = #999000 1'b0;
end 
// expected freq_data[ 16 ]
initial
begin
	freq_data_expected[16] = 1'bX;
	freq_data_expected[16] = #999000 1'b0;
end 
// expected freq_data[ 15 ]
initial
begin
	freq_data_expected[15] = 1'bX;
	freq_data_expected[15] = #999000 1'b0;
end 
// expected freq_data[ 14 ]
initial
begin
	freq_data_expected[14] = 1'bX;
	freq_data_expected[14] = #999000 1'b0;
end 
// expected freq_data[ 13 ]
initial
begin
	freq_data_expected[13] = 1'bX;
	freq_data_expected[13] = #999000 1'b0;
end 
// expected freq_data[ 12 ]
initial
begin
	freq_data_expected[12] = 1'bX;
	freq_data_expected[12] = #999000 1'b0;
end 
// expected freq_data[ 11 ]
initial
begin
	freq_data_expected[11] = 1'bX;
	freq_data_expected[11] = #999000 1'b0;
end 
// expected freq_data[ 10 ]
initial
begin
	freq_data_expected[10] = 1'bX;
	freq_data_expected[10] = #999000 1'b0;
end 
// expected freq_data[ 9 ]
initial
begin
	freq_data_expected[9] = 1'bX;
	freq_data_expected[9] = #999000 1'b0;
end 
// expected freq_data[ 8 ]
initial
begin
	freq_data_expected[8] = 1'bX;
	freq_data_expected[8] = #999000 1'b0;
end 
// expected freq_data[ 7 ]
initial
begin
	freq_data_expected[7] = 1'bX;
	freq_data_expected[7] = #999000 1'b0;
end 
// expected freq_data[ 6 ]
initial
begin
	freq_data_expected[6] = 1'bX;
	freq_data_expected[6] = #999000 1'b0;
end 
// expected freq_data[ 5 ]
initial
begin
	freq_data_expected[5] = 1'bX;
	freq_data_expected[5] = #999000 1'b0;
end 
// expected freq_data[ 4 ]
initial
begin
	freq_data_expected[4] = 1'bX;
	freq_data_expected[4] = #999000 1'b0;
end 
// expected freq_data[ 3 ]
initial
begin
	freq_data_expected[3] = 1'bX;
	freq_data_expected[3] = #999000 1'b0;
end 
// expected freq_data[ 2 ]
initial
begin
	freq_data_expected[2] = 1'bX;
	freq_data_expected[2] = #999000 1'b0;
end 
// expected freq_data[ 1 ]
initial
begin
	freq_data_expected[1] = 1'bX;
	freq_data_expected[1] = #999000 1'b0;
end 
// expected freq_data[ 0 ]
initial
begin
	freq_data_expected[0] = 1'bX;
	freq_data_expected[0] = #999000 1'b0;
end 

// expected beep
initial
begin
	beep_expected = 1'bX;
end 
// generate trigger
always @(beep_expected or beep or cnt_expected or cnt or cnt_500ms_expected or cnt_500ms or freq_cnt_expected or freq_cnt or freq_data_expected or freq_data)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected beep = %b | expected cnt = %b | expected cnt_500ms = %b | expected freq_cnt = %b | expected freq_data = %b | ",beep_expected_prev,cnt_expected_prev,cnt_500ms_expected_prev,freq_cnt_expected_prev,freq_data_expected_prev);
	$display("| real beep = %b | real cnt = %b | real cnt_500ms = %b | real freq_cnt = %b | real freq_data = %b | ",beep_prev,cnt_prev,cnt_500ms_prev,freq_cnt_prev,freq_data_prev);
`endif
	if (
		( beep_expected_prev !== 1'bx ) && ( beep_prev !== beep_expected_prev )
		&& ((beep_expected_prev !== last_beep_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port beep :: @time = %t",  $realtime);
		$display ("     Expected value = %b", beep_expected_prev);
		$display ("     Real value = %b", beep_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_beep_exp = beep_expected_prev;
	end
	if (
		( cnt_expected_prev[0] !== 1'bx ) && ( cnt_prev[0] !== cnt_expected_prev[0] )
		&& ((cnt_expected_prev[0] !== last_cnt_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[0] = cnt_expected_prev[0];
	end
	if (
		( cnt_expected_prev[1] !== 1'bx ) && ( cnt_prev[1] !== cnt_expected_prev[1] )
		&& ((cnt_expected_prev[1] !== last_cnt_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[1] = cnt_expected_prev[1];
	end
	if (
		( cnt_expected_prev[2] !== 1'bx ) && ( cnt_prev[2] !== cnt_expected_prev[2] )
		&& ((cnt_expected_prev[2] !== last_cnt_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[2] = cnt_expected_prev[2];
	end
	if (
		( cnt_expected_prev[3] !== 1'bx ) && ( cnt_prev[3] !== cnt_expected_prev[3] )
		&& ((cnt_expected_prev[3] !== last_cnt_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[3] = cnt_expected_prev[3];
	end
	if (
		( cnt_expected_prev[4] !== 1'bx ) && ( cnt_prev[4] !== cnt_expected_prev[4] )
		&& ((cnt_expected_prev[4] !== last_cnt_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[4] = cnt_expected_prev[4];
	end
	if (
		( cnt_expected_prev[5] !== 1'bx ) && ( cnt_prev[5] !== cnt_expected_prev[5] )
		&& ((cnt_expected_prev[5] !== last_cnt_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[5] = cnt_expected_prev[5];
	end
	if (
		( cnt_expected_prev[6] !== 1'bx ) && ( cnt_prev[6] !== cnt_expected_prev[6] )
		&& ((cnt_expected_prev[6] !== last_cnt_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[6] = cnt_expected_prev[6];
	end
	if (
		( cnt_expected_prev[7] !== 1'bx ) && ( cnt_prev[7] !== cnt_expected_prev[7] )
		&& ((cnt_expected_prev[7] !== last_cnt_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[7] = cnt_expected_prev[7];
	end
	if (
		( cnt_expected_prev[8] !== 1'bx ) && ( cnt_prev[8] !== cnt_expected_prev[8] )
		&& ((cnt_expected_prev[8] !== last_cnt_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[8] = cnt_expected_prev[8];
	end
	if (
		( cnt_expected_prev[9] !== 1'bx ) && ( cnt_prev[9] !== cnt_expected_prev[9] )
		&& ((cnt_expected_prev[9] !== last_cnt_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[9] = cnt_expected_prev[9];
	end
	if (
		( cnt_expected_prev[10] !== 1'bx ) && ( cnt_prev[10] !== cnt_expected_prev[10] )
		&& ((cnt_expected_prev[10] !== last_cnt_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[10] = cnt_expected_prev[10];
	end
	if (
		( cnt_expected_prev[11] !== 1'bx ) && ( cnt_prev[11] !== cnt_expected_prev[11] )
		&& ((cnt_expected_prev[11] !== last_cnt_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[11] = cnt_expected_prev[11];
	end
	if (
		( cnt_expected_prev[12] !== 1'bx ) && ( cnt_prev[12] !== cnt_expected_prev[12] )
		&& ((cnt_expected_prev[12] !== last_cnt_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[12] = cnt_expected_prev[12];
	end
	if (
		( cnt_expected_prev[13] !== 1'bx ) && ( cnt_prev[13] !== cnt_expected_prev[13] )
		&& ((cnt_expected_prev[13] !== last_cnt_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[13] = cnt_expected_prev[13];
	end
	if (
		( cnt_expected_prev[14] !== 1'bx ) && ( cnt_prev[14] !== cnt_expected_prev[14] )
		&& ((cnt_expected_prev[14] !== last_cnt_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[14] = cnt_expected_prev[14];
	end
	if (
		( cnt_expected_prev[15] !== 1'bx ) && ( cnt_prev[15] !== cnt_expected_prev[15] )
		&& ((cnt_expected_prev[15] !== last_cnt_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[15] = cnt_expected_prev[15];
	end
	if (
		( cnt_expected_prev[16] !== 1'bx ) && ( cnt_prev[16] !== cnt_expected_prev[16] )
		&& ((cnt_expected_prev[16] !== last_cnt_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[16] = cnt_expected_prev[16];
	end
	if (
		( cnt_expected_prev[17] !== 1'bx ) && ( cnt_prev[17] !== cnt_expected_prev[17] )
		&& ((cnt_expected_prev[17] !== last_cnt_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[17] = cnt_expected_prev[17];
	end
	if (
		( cnt_expected_prev[18] !== 1'bx ) && ( cnt_prev[18] !== cnt_expected_prev[18] )
		&& ((cnt_expected_prev[18] !== last_cnt_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[18] = cnt_expected_prev[18];
	end
	if (
		( cnt_expected_prev[19] !== 1'bx ) && ( cnt_prev[19] !== cnt_expected_prev[19] )
		&& ((cnt_expected_prev[19] !== last_cnt_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[19] = cnt_expected_prev[19];
	end
	if (
		( cnt_expected_prev[20] !== 1'bx ) && ( cnt_prev[20] !== cnt_expected_prev[20] )
		&& ((cnt_expected_prev[20] !== last_cnt_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[20] = cnt_expected_prev[20];
	end
	if (
		( cnt_expected_prev[21] !== 1'bx ) && ( cnt_prev[21] !== cnt_expected_prev[21] )
		&& ((cnt_expected_prev[21] !== last_cnt_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[21] = cnt_expected_prev[21];
	end
	if (
		( cnt_expected_prev[22] !== 1'bx ) && ( cnt_prev[22] !== cnt_expected_prev[22] )
		&& ((cnt_expected_prev[22] !== last_cnt_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[22] = cnt_expected_prev[22];
	end
	if (
		( cnt_expected_prev[23] !== 1'bx ) && ( cnt_prev[23] !== cnt_expected_prev[23] )
		&& ((cnt_expected_prev[23] !== last_cnt_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[23] = cnt_expected_prev[23];
	end
	if (
		( cnt_expected_prev[24] !== 1'bx ) && ( cnt_prev[24] !== cnt_expected_prev[24] )
		&& ((cnt_expected_prev[24] !== last_cnt_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[24] = cnt_expected_prev[24];
	end
	if (
		( cnt_500ms_expected_prev[0] !== 1'bx ) && ( cnt_500ms_prev[0] !== cnt_500ms_expected_prev[0] )
		&& ((cnt_500ms_expected_prev[0] !== last_cnt_500ms_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt_500ms[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_500ms_expected_prev);
		$display ("     Real value = %b", cnt_500ms_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cnt_500ms_exp[0] = cnt_500ms_expected_prev[0];
	end
	if (
		( cnt_500ms_expected_prev[1] !== 1'bx ) && ( cnt_500ms_prev[1] !== cnt_500ms_expected_prev[1] )
		&& ((cnt_500ms_expected_prev[1] !== last_cnt_500ms_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt_500ms[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_500ms_expected_prev);
		$display ("     Real value = %b", cnt_500ms_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cnt_500ms_exp[1] = cnt_500ms_expected_prev[1];
	end
	if (
		( cnt_500ms_expected_prev[2] !== 1'bx ) && ( cnt_500ms_prev[2] !== cnt_500ms_expected_prev[2] )
		&& ((cnt_500ms_expected_prev[2] !== last_cnt_500ms_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt_500ms[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_500ms_expected_prev);
		$display ("     Real value = %b", cnt_500ms_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cnt_500ms_exp[2] = cnt_500ms_expected_prev[2];
	end
	if (
		( freq_cnt_expected_prev[0] !== 1'bx ) && ( freq_cnt_prev[0] !== freq_cnt_expected_prev[0] )
		&& ((freq_cnt_expected_prev[0] !== last_freq_cnt_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_cnt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_cnt_expected_prev);
		$display ("     Real value = %b", freq_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_freq_cnt_exp[0] = freq_cnt_expected_prev[0];
	end
	if (
		( freq_cnt_expected_prev[1] !== 1'bx ) && ( freq_cnt_prev[1] !== freq_cnt_expected_prev[1] )
		&& ((freq_cnt_expected_prev[1] !== last_freq_cnt_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_cnt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_cnt_expected_prev);
		$display ("     Real value = %b", freq_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_freq_cnt_exp[1] = freq_cnt_expected_prev[1];
	end
	if (
		( freq_cnt_expected_prev[2] !== 1'bx ) && ( freq_cnt_prev[2] !== freq_cnt_expected_prev[2] )
		&& ((freq_cnt_expected_prev[2] !== last_freq_cnt_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_cnt[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_cnt_expected_prev);
		$display ("     Real value = %b", freq_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_freq_cnt_exp[2] = freq_cnt_expected_prev[2];
	end
	if (
		( freq_cnt_expected_prev[3] !== 1'bx ) && ( freq_cnt_prev[3] !== freq_cnt_expected_prev[3] )
		&& ((freq_cnt_expected_prev[3] !== last_freq_cnt_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_cnt[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_cnt_expected_prev);
		$display ("     Real value = %b", freq_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_freq_cnt_exp[3] = freq_cnt_expected_prev[3];
	end
	if (
		( freq_cnt_expected_prev[4] !== 1'bx ) && ( freq_cnt_prev[4] !== freq_cnt_expected_prev[4] )
		&& ((freq_cnt_expected_prev[4] !== last_freq_cnt_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_cnt[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_cnt_expected_prev);
		$display ("     Real value = %b", freq_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_freq_cnt_exp[4] = freq_cnt_expected_prev[4];
	end
	if (
		( freq_cnt_expected_prev[5] !== 1'bx ) && ( freq_cnt_prev[5] !== freq_cnt_expected_prev[5] )
		&& ((freq_cnt_expected_prev[5] !== last_freq_cnt_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_cnt[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_cnt_expected_prev);
		$display ("     Real value = %b", freq_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_freq_cnt_exp[5] = freq_cnt_expected_prev[5];
	end
	if (
		( freq_cnt_expected_prev[6] !== 1'bx ) && ( freq_cnt_prev[6] !== freq_cnt_expected_prev[6] )
		&& ((freq_cnt_expected_prev[6] !== last_freq_cnt_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_cnt[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_cnt_expected_prev);
		$display ("     Real value = %b", freq_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_freq_cnt_exp[6] = freq_cnt_expected_prev[6];
	end
	if (
		( freq_cnt_expected_prev[7] !== 1'bx ) && ( freq_cnt_prev[7] !== freq_cnt_expected_prev[7] )
		&& ((freq_cnt_expected_prev[7] !== last_freq_cnt_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_cnt[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_cnt_expected_prev);
		$display ("     Real value = %b", freq_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_freq_cnt_exp[7] = freq_cnt_expected_prev[7];
	end
	if (
		( freq_cnt_expected_prev[8] !== 1'bx ) && ( freq_cnt_prev[8] !== freq_cnt_expected_prev[8] )
		&& ((freq_cnt_expected_prev[8] !== last_freq_cnt_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_cnt[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_cnt_expected_prev);
		$display ("     Real value = %b", freq_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_freq_cnt_exp[8] = freq_cnt_expected_prev[8];
	end
	if (
		( freq_cnt_expected_prev[9] !== 1'bx ) && ( freq_cnt_prev[9] !== freq_cnt_expected_prev[9] )
		&& ((freq_cnt_expected_prev[9] !== last_freq_cnt_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_cnt[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_cnt_expected_prev);
		$display ("     Real value = %b", freq_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_freq_cnt_exp[9] = freq_cnt_expected_prev[9];
	end
	if (
		( freq_cnt_expected_prev[10] !== 1'bx ) && ( freq_cnt_prev[10] !== freq_cnt_expected_prev[10] )
		&& ((freq_cnt_expected_prev[10] !== last_freq_cnt_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_cnt[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_cnt_expected_prev);
		$display ("     Real value = %b", freq_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_freq_cnt_exp[10] = freq_cnt_expected_prev[10];
	end
	if (
		( freq_cnt_expected_prev[11] !== 1'bx ) && ( freq_cnt_prev[11] !== freq_cnt_expected_prev[11] )
		&& ((freq_cnt_expected_prev[11] !== last_freq_cnt_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_cnt[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_cnt_expected_prev);
		$display ("     Real value = %b", freq_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_freq_cnt_exp[11] = freq_cnt_expected_prev[11];
	end
	if (
		( freq_cnt_expected_prev[12] !== 1'bx ) && ( freq_cnt_prev[12] !== freq_cnt_expected_prev[12] )
		&& ((freq_cnt_expected_prev[12] !== last_freq_cnt_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_cnt[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_cnt_expected_prev);
		$display ("     Real value = %b", freq_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_freq_cnt_exp[12] = freq_cnt_expected_prev[12];
	end
	if (
		( freq_cnt_expected_prev[13] !== 1'bx ) && ( freq_cnt_prev[13] !== freq_cnt_expected_prev[13] )
		&& ((freq_cnt_expected_prev[13] !== last_freq_cnt_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_cnt[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_cnt_expected_prev);
		$display ("     Real value = %b", freq_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_freq_cnt_exp[13] = freq_cnt_expected_prev[13];
	end
	if (
		( freq_cnt_expected_prev[14] !== 1'bx ) && ( freq_cnt_prev[14] !== freq_cnt_expected_prev[14] )
		&& ((freq_cnt_expected_prev[14] !== last_freq_cnt_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_cnt[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_cnt_expected_prev);
		$display ("     Real value = %b", freq_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_freq_cnt_exp[14] = freq_cnt_expected_prev[14];
	end
	if (
		( freq_cnt_expected_prev[15] !== 1'bx ) && ( freq_cnt_prev[15] !== freq_cnt_expected_prev[15] )
		&& ((freq_cnt_expected_prev[15] !== last_freq_cnt_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_cnt[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_cnt_expected_prev);
		$display ("     Real value = %b", freq_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_freq_cnt_exp[15] = freq_cnt_expected_prev[15];
	end
	if (
		( freq_cnt_expected_prev[16] !== 1'bx ) && ( freq_cnt_prev[16] !== freq_cnt_expected_prev[16] )
		&& ((freq_cnt_expected_prev[16] !== last_freq_cnt_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_cnt[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_cnt_expected_prev);
		$display ("     Real value = %b", freq_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_freq_cnt_exp[16] = freq_cnt_expected_prev[16];
	end
	if (
		( freq_cnt_expected_prev[17] !== 1'bx ) && ( freq_cnt_prev[17] !== freq_cnt_expected_prev[17] )
		&& ((freq_cnt_expected_prev[17] !== last_freq_cnt_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_cnt[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_cnt_expected_prev);
		$display ("     Real value = %b", freq_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_freq_cnt_exp[17] = freq_cnt_expected_prev[17];
	end
	if (
		( freq_data_expected_prev[0] !== 1'bx ) && ( freq_data_prev[0] !== freq_data_expected_prev[0] )
		&& ((freq_data_expected_prev[0] !== last_freq_data_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_data_expected_prev);
		$display ("     Real value = %b", freq_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_freq_data_exp[0] = freq_data_expected_prev[0];
	end
	if (
		( freq_data_expected_prev[1] !== 1'bx ) && ( freq_data_prev[1] !== freq_data_expected_prev[1] )
		&& ((freq_data_expected_prev[1] !== last_freq_data_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_data_expected_prev);
		$display ("     Real value = %b", freq_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_freq_data_exp[1] = freq_data_expected_prev[1];
	end
	if (
		( freq_data_expected_prev[2] !== 1'bx ) && ( freq_data_prev[2] !== freq_data_expected_prev[2] )
		&& ((freq_data_expected_prev[2] !== last_freq_data_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_data_expected_prev);
		$display ("     Real value = %b", freq_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_freq_data_exp[2] = freq_data_expected_prev[2];
	end
	if (
		( freq_data_expected_prev[3] !== 1'bx ) && ( freq_data_prev[3] !== freq_data_expected_prev[3] )
		&& ((freq_data_expected_prev[3] !== last_freq_data_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_data_expected_prev);
		$display ("     Real value = %b", freq_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_freq_data_exp[3] = freq_data_expected_prev[3];
	end
	if (
		( freq_data_expected_prev[4] !== 1'bx ) && ( freq_data_prev[4] !== freq_data_expected_prev[4] )
		&& ((freq_data_expected_prev[4] !== last_freq_data_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_data_expected_prev);
		$display ("     Real value = %b", freq_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_freq_data_exp[4] = freq_data_expected_prev[4];
	end
	if (
		( freq_data_expected_prev[5] !== 1'bx ) && ( freq_data_prev[5] !== freq_data_expected_prev[5] )
		&& ((freq_data_expected_prev[5] !== last_freq_data_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_data_expected_prev);
		$display ("     Real value = %b", freq_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_freq_data_exp[5] = freq_data_expected_prev[5];
	end
	if (
		( freq_data_expected_prev[6] !== 1'bx ) && ( freq_data_prev[6] !== freq_data_expected_prev[6] )
		&& ((freq_data_expected_prev[6] !== last_freq_data_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_data_expected_prev);
		$display ("     Real value = %b", freq_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_freq_data_exp[6] = freq_data_expected_prev[6];
	end
	if (
		( freq_data_expected_prev[7] !== 1'bx ) && ( freq_data_prev[7] !== freq_data_expected_prev[7] )
		&& ((freq_data_expected_prev[7] !== last_freq_data_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_data_expected_prev);
		$display ("     Real value = %b", freq_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_freq_data_exp[7] = freq_data_expected_prev[7];
	end
	if (
		( freq_data_expected_prev[8] !== 1'bx ) && ( freq_data_prev[8] !== freq_data_expected_prev[8] )
		&& ((freq_data_expected_prev[8] !== last_freq_data_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_data[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_data_expected_prev);
		$display ("     Real value = %b", freq_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_freq_data_exp[8] = freq_data_expected_prev[8];
	end
	if (
		( freq_data_expected_prev[9] !== 1'bx ) && ( freq_data_prev[9] !== freq_data_expected_prev[9] )
		&& ((freq_data_expected_prev[9] !== last_freq_data_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_data[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_data_expected_prev);
		$display ("     Real value = %b", freq_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_freq_data_exp[9] = freq_data_expected_prev[9];
	end
	if (
		( freq_data_expected_prev[10] !== 1'bx ) && ( freq_data_prev[10] !== freq_data_expected_prev[10] )
		&& ((freq_data_expected_prev[10] !== last_freq_data_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_data[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_data_expected_prev);
		$display ("     Real value = %b", freq_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_freq_data_exp[10] = freq_data_expected_prev[10];
	end
	if (
		( freq_data_expected_prev[11] !== 1'bx ) && ( freq_data_prev[11] !== freq_data_expected_prev[11] )
		&& ((freq_data_expected_prev[11] !== last_freq_data_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_data[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_data_expected_prev);
		$display ("     Real value = %b", freq_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_freq_data_exp[11] = freq_data_expected_prev[11];
	end
	if (
		( freq_data_expected_prev[12] !== 1'bx ) && ( freq_data_prev[12] !== freq_data_expected_prev[12] )
		&& ((freq_data_expected_prev[12] !== last_freq_data_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_data[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_data_expected_prev);
		$display ("     Real value = %b", freq_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_freq_data_exp[12] = freq_data_expected_prev[12];
	end
	if (
		( freq_data_expected_prev[13] !== 1'bx ) && ( freq_data_prev[13] !== freq_data_expected_prev[13] )
		&& ((freq_data_expected_prev[13] !== last_freq_data_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_data[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_data_expected_prev);
		$display ("     Real value = %b", freq_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_freq_data_exp[13] = freq_data_expected_prev[13];
	end
	if (
		( freq_data_expected_prev[14] !== 1'bx ) && ( freq_data_prev[14] !== freq_data_expected_prev[14] )
		&& ((freq_data_expected_prev[14] !== last_freq_data_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_data[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_data_expected_prev);
		$display ("     Real value = %b", freq_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_freq_data_exp[14] = freq_data_expected_prev[14];
	end
	if (
		( freq_data_expected_prev[15] !== 1'bx ) && ( freq_data_prev[15] !== freq_data_expected_prev[15] )
		&& ((freq_data_expected_prev[15] !== last_freq_data_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_data[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_data_expected_prev);
		$display ("     Real value = %b", freq_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_freq_data_exp[15] = freq_data_expected_prev[15];
	end
	if (
		( freq_data_expected_prev[16] !== 1'bx ) && ( freq_data_prev[16] !== freq_data_expected_prev[16] )
		&& ((freq_data_expected_prev[16] !== last_freq_data_exp[16]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_data[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_data_expected_prev);
		$display ("     Real value = %b", freq_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_freq_data_exp[16] = freq_data_expected_prev[16];
	end
	if (
		( freq_data_expected_prev[17] !== 1'bx ) && ( freq_data_prev[17] !== freq_data_expected_prev[17] )
		&& ((freq_data_expected_prev[17] !== last_freq_data_exp[17]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port freq_data[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", freq_data_expected_prev);
		$display ("     Real value = %b", freq_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_freq_data_exp[17] = freq_data_expected_prev[17];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module beep_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg rst;
// wires                                               
wire beep;
wire [24:0] cnt;
wire [2:0] cnt_500ms;
wire [17:0] freq_cnt;
wire [17:0] freq_data;

wire sampler;                             

// assign statements (if any)                          
beep i1 (
// port map - connection between master ports and signals/registers   
	.beep(beep),
	.clk(clk),
	.cnt(cnt),
	.cnt_500ms(cnt_500ms),
	.freq_cnt(freq_cnt),
	.freq_data(freq_data),
	.rst(rst)
);

// clk
always
begin
	clk = 1'b0;
	clk = #1000000 1'b1;
	#1000000;
end 

// rst
initial
begin
	rst = 1'b1;
end 

beep_vlg_sample_tst tb_sample (
	.clk(clk),
	.rst(rst),
	.sampler_tx(sampler)
);

beep_vlg_check_tst tb_out(
	.beep(beep),
	.cnt(cnt),
	.cnt_500ms(cnt_500ms),
	.freq_cnt(freq_cnt),
	.freq_data(freq_data),
	.sampler_rx(sampler)
);
endmodule

