// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 64-Bit"
// VERSION "Version 13.1.0 Build 162 10/23/2013 SJ Full Version"

// DATE "08/31/2021 23:07:07"

// 
// Device: Altera EP4CE10F17C8 Package FBGA256
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module counter (
	sys_clk,
	sys_rst_n,
	cnt,
	out);
input 	sys_clk;
input 	sys_rst_n;
output 	[3:0] cnt;
output 	out;

// Design Ports Information
// cnt[0]	=>  Location: PIN_L2,	 I/O Standard: 2.5 V,	 Current Strength: Default
// cnt[1]	=>  Location: PIN_N2,	 I/O Standard: 2.5 V,	 Current Strength: Default
// cnt[2]	=>  Location: PIN_K1,	 I/O Standard: 2.5 V,	 Current Strength: Default
// cnt[3]	=>  Location: PIN_N1,	 I/O Standard: 2.5 V,	 Current Strength: Default
// out	=>  Location: PIN_L3,	 I/O Standard: 2.5 V,	 Current Strength: Default
// sys_rst_n	=>  Location: PIN_K2,	 I/O Standard: 2.5 V,	 Current Strength: Default
// sys_clk	=>  Location: PIN_E1,	 I/O Standard: 2.5 V,	 Current Strength: Default


wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \cnt[0]~output_o ;
wire \cnt[1]~output_o ;
wire \cnt[2]~output_o ;
wire \cnt[3]~output_o ;
wire \out~output_o ;
wire \sys_clk~input_o ;
wire \sys_clk~inputclkctrl_outclk ;
wire \sys_rst_n~input_o ;
wire \cnt~0_combout ;
wire \cnt[0]~reg0_q ;
wire \Add0~0_combout ;
wire \cnt~2_combout ;
wire \cnt[2]~reg0_q ;
wire \cnt~3_combout ;
wire \cnt[3]~reg0_q ;
wire \Equal0~0_combout ;
wire \cnt~1_combout ;
wire \cnt[1]~reg0_q ;
wire \out~0_combout ;
wire \out~reg0_q ;


// Location: IOOBUF_X0_Y8_N16
cycloneive_io_obuf \cnt[0]~output (
	.i(\cnt[0]~reg0_q ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\cnt[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \cnt[0]~output .bus_hold = "false";
defparam \cnt[0]~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X0_Y7_N16
cycloneive_io_obuf \cnt[1]~output (
	.i(\cnt[1]~reg0_q ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\cnt[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \cnt[1]~output .bus_hold = "false";
defparam \cnt[1]~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X0_Y8_N9
cycloneive_io_obuf \cnt[2]~output (
	.i(\cnt[2]~reg0_q ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\cnt[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \cnt[2]~output .bus_hold = "false";
defparam \cnt[2]~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X0_Y7_N23
cycloneive_io_obuf \cnt[3]~output (
	.i(\cnt[3]~reg0_q ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\cnt[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \cnt[3]~output .bus_hold = "false";
defparam \cnt[3]~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X0_Y7_N2
cycloneive_io_obuf \out~output (
	.i(\out~reg0_q ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out~output_o ),
	.obar());
// synopsys translate_off
defparam \out~output .bus_hold = "false";
defparam \out~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOIBUF_X0_Y11_N8
cycloneive_io_ibuf \sys_clk~input (
	.i(sys_clk),
	.ibar(gnd),
	.o(\sys_clk~input_o ));
// synopsys translate_off
defparam \sys_clk~input .bus_hold = "false";
defparam \sys_clk~input .simulate_z_as = "z";
// synopsys translate_on

// Location: CLKCTRL_G2
cycloneive_clkctrl \sys_clk~inputclkctrl (
	.ena(vcc),
	.inclk({vcc,vcc,vcc,\sys_clk~input_o }),
	.clkselect(2'b00),
	.devclrn(devclrn),
	.devpor(devpor),
	.outclk(\sys_clk~inputclkctrl_outclk ));
// synopsys translate_off
defparam \sys_clk~inputclkctrl .clock_type = "global clock";
defparam \sys_clk~inputclkctrl .ena_register_mode = "none";
// synopsys translate_on

// Location: IOIBUF_X0_Y8_N1
cycloneive_io_ibuf \sys_rst_n~input (
	.i(sys_rst_n),
	.ibar(gnd),
	.o(\sys_rst_n~input_o ));
// synopsys translate_off
defparam \sys_rst_n~input .bus_hold = "false";
defparam \sys_rst_n~input .simulate_z_as = "z";
// synopsys translate_on

// Location: LCCOMB_X1_Y7_N8
cycloneive_lcell_comb \cnt~0 (
// Equation(s):
// \cnt~0_combout  = (\sys_rst_n~input_o  & !\cnt[0]~reg0_q )

	.dataa(\sys_rst_n~input_o ),
	.datab(gnd),
	.datac(\cnt[0]~reg0_q ),
	.datad(gnd),
	.cin(gnd),
	.combout(\cnt~0_combout ),
	.cout());
// synopsys translate_off
defparam \cnt~0 .lut_mask = 16'h0A0A;
defparam \cnt~0 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: FF_X1_Y7_N9
dffeas \cnt[0]~reg0 (
	.clk(\sys_clk~inputclkctrl_outclk ),
	.d(\cnt~0_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\cnt[0]~reg0_q ),
	.prn(vcc));
// synopsys translate_off
defparam \cnt[0]~reg0 .is_wysiwyg = "true";
defparam \cnt[0]~reg0 .power_up = "low";
// synopsys translate_on

// Location: LCCOMB_X1_Y7_N16
cycloneive_lcell_comb \Add0~0 (
// Equation(s):
// \Add0~0_combout  = (\cnt[0]~reg0_q  & \cnt[1]~reg0_q )

	.dataa(gnd),
	.datab(gnd),
	.datac(\cnt[0]~reg0_q ),
	.datad(\cnt[1]~reg0_q ),
	.cin(gnd),
	.combout(\Add0~0_combout ),
	.cout());
// synopsys translate_off
defparam \Add0~0 .lut_mask = 16'hF000;
defparam \Add0~0 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: LCCOMB_X1_Y7_N28
cycloneive_lcell_comb \cnt~2 (
// Equation(s):
// \cnt~2_combout  = (\sys_rst_n~input_o  & (\Equal0~0_combout  & (\cnt[2]~reg0_q  $ (\Add0~0_combout ))))

	.dataa(\sys_rst_n~input_o ),
	.datab(\Equal0~0_combout ),
	.datac(\cnt[2]~reg0_q ),
	.datad(\Add0~0_combout ),
	.cin(gnd),
	.combout(\cnt~2_combout ),
	.cout());
// synopsys translate_off
defparam \cnt~2 .lut_mask = 16'h0880;
defparam \cnt~2 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: FF_X1_Y7_N29
dffeas \cnt[2]~reg0 (
	.clk(\sys_clk~inputclkctrl_outclk ),
	.d(\cnt~2_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\cnt[2]~reg0_q ),
	.prn(vcc));
// synopsys translate_off
defparam \cnt[2]~reg0 .is_wysiwyg = "true";
defparam \cnt[2]~reg0 .power_up = "low";
// synopsys translate_on

// Location: LCCOMB_X1_Y7_N22
cycloneive_lcell_comb \cnt~3 (
// Equation(s):
// \cnt~3_combout  = (\sys_rst_n~input_o  & (\cnt[3]~reg0_q  $ (((\cnt[2]~reg0_q  & \Add0~0_combout )))))

	.dataa(\sys_rst_n~input_o ),
	.datab(\cnt[2]~reg0_q ),
	.datac(\cnt[3]~reg0_q ),
	.datad(\Add0~0_combout ),
	.cin(gnd),
	.combout(\cnt~3_combout ),
	.cout());
// synopsys translate_off
defparam \cnt~3 .lut_mask = 16'h28A0;
defparam \cnt~3 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: FF_X1_Y7_N23
dffeas \cnt[3]~reg0 (
	.clk(\sys_clk~inputclkctrl_outclk ),
	.d(\cnt~3_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\cnt[3]~reg0_q ),
	.prn(vcc));
// synopsys translate_off
defparam \cnt[3]~reg0 .is_wysiwyg = "true";
defparam \cnt[3]~reg0 .power_up = "low";
// synopsys translate_on

// Location: LCCOMB_X1_Y7_N18
cycloneive_lcell_comb \Equal0~0 (
// Equation(s):
// \Equal0~0_combout  = (((!\cnt[2]~reg0_q ) # (!\cnt[3]~reg0_q )) # (!\cnt[0]~reg0_q )) # (!\cnt[1]~reg0_q )

	.dataa(\cnt[1]~reg0_q ),
	.datab(\cnt[0]~reg0_q ),
	.datac(\cnt[3]~reg0_q ),
	.datad(\cnt[2]~reg0_q ),
	.cin(gnd),
	.combout(\Equal0~0_combout ),
	.cout());
// synopsys translate_off
defparam \Equal0~0 .lut_mask = 16'h7FFF;
defparam \Equal0~0 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: LCCOMB_X1_Y7_N10
cycloneive_lcell_comb \cnt~1 (
// Equation(s):
// \cnt~1_combout  = (\sys_rst_n~input_o  & (\Equal0~0_combout  & (\cnt[0]~reg0_q  $ (\cnt[1]~reg0_q ))))

	.dataa(\sys_rst_n~input_o ),
	.datab(\cnt[0]~reg0_q ),
	.datac(\cnt[1]~reg0_q ),
	.datad(\Equal0~0_combout ),
	.cin(gnd),
	.combout(\cnt~1_combout ),
	.cout());
// synopsys translate_off
defparam \cnt~1 .lut_mask = 16'h2800;
defparam \cnt~1 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: FF_X1_Y7_N11
dffeas \cnt[1]~reg0 (
	.clk(\sys_clk~inputclkctrl_outclk ),
	.d(\cnt~1_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\cnt[1]~reg0_q ),
	.prn(vcc));
// synopsys translate_off
defparam \cnt[1]~reg0 .is_wysiwyg = "true";
defparam \cnt[1]~reg0 .power_up = "low";
// synopsys translate_on

// Location: LCCOMB_X1_Y7_N20
cycloneive_lcell_comb \out~0 (
// Equation(s):
// \out~0_combout  = \out~reg0_q  $ (!\Equal0~0_combout )

	.dataa(gnd),
	.datab(gnd),
	.datac(\out~reg0_q ),
	.datad(\Equal0~0_combout ),
	.cin(gnd),
	.combout(\out~0_combout ),
	.cout());
// synopsys translate_off
defparam \out~0 .lut_mask = 16'hF00F;
defparam \out~0 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: FF_X1_Y7_N21
dffeas \out~reg0 (
	.clk(\sys_clk~inputclkctrl_outclk ),
	.d(\out~0_combout ),
	.asdata(vcc),
	.clrn(\sys_rst_n~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\out~reg0_q ),
	.prn(vcc));
// synopsys translate_off
defparam \out~reg0 .is_wysiwyg = "true";
defparam \out~reg0 .power_up = "low";
// synopsys translate_on

assign cnt[0] = \cnt[0]~output_o ;

assign cnt[1] = \cnt[1]~output_o ;

assign cnt[2] = \cnt[2]~output_o ;

assign cnt[3] = \cnt[3]~output_o ;

assign out = \out~output_o ;

endmodule
