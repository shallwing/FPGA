// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/24/2021 21:57:40"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    flip_flop
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module flip_flop_vlg_sample_tst(
	in,
	sys_clk,
	sys_rst_n,
	sampler_tx
);
input  in;
input  sys_clk;
input  sys_rst_n;
output sampler_tx;

reg sample;
time current_time;
always @(in or sys_clk or sys_rst_n)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module flip_flop_vlg_check_tst (
	out,
	sampler_rx
);
input  out;
input sampler_rx;

reg  out_expected;

reg  out_prev;

reg  out_expected_prev;

reg  last_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	out_prev = out;
end

// update expected /o prevs

always @(trigger)
begin
	out_expected_prev = out_expected;
end



// expected out
initial
begin
	out_expected = 1'bX;
end 
// generate trigger
always @(out_expected or out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected out = %b | ",out_expected_prev);
	$display("| real out = %b | ",out_prev);
`endif
	if (
		( out_expected_prev !== 1'bx ) && ( out_prev !== out_expected_prev )
		&& ((out_expected_prev !== last_out_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_exp = out_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module flip_flop_vlg_vec_tst();
// constants                                           
// general purpose registers
reg in;
reg sys_clk;
reg sys_rst_n;
// wires                                               
wire out;

wire sampler;                             

// assign statements (if any)                          
flip_flop i1 (
// port map - connection between master ports and signals/registers   
	.in(in),
	.out(out),
	.sys_clk(sys_clk),
	.sys_rst_n(sys_rst_n)
);

// in
initial
begin
	in = 1'b1;
	in = #5423 1'b0;
	in = #10200 1'b1;
	in = #6222 1'b0;
	in = #4000 1'b1;
	in = #6000 1'b0;
	in = #4000 1'b1;
	in = #5108 1'b0;
	in = #1567 1'b1;
	in = #1766 1'b0;
	in = #1567 1'b1;
	in = #1766 1'b0;
	in = #1567 1'b1;
	in = #6758 1'b0;
	in = #11800 1'b1;
	in = #2256 1'b0;
	in = #939 1'b1;
	in = #1700 1'b0;
	in = #3300 1'b1;
	in = #1700 1'b0;
	in = #2361 1'b1;
	# 49;
	repeat(2)
	begin
		in = 1'b0;
		in = #2300 1'b1;
		# 1033;
	end
	in = 1'b0;
	in = #2300 1'b1;
	in = #985 1'b0;
	in = #4290 1'b1;
	in = #4300 1'b0;
	in = #2601 1'b1;
	in = #2450 1'b0;
	in = #2550 1'b1;
	in = #2450 1'b0;
	in = #1359 1'b1;
	in = #1599 1'b0;
	in = #3150 1'b1;
	in = #1850 1'b0;
	in = #3150 1'b1;
	in = #972 1'b0;
	in = #2134 1'b1;
	in = #1199 1'b0;
	in = #2134 1'b1;
	in = #1199 1'b0;
	in = #2134 1'b1;
	in = #9957 1'b0;
	in = #9400 1'b1;
	in = #2391 1'b0;
	in = #1334 1'b1;
	in = #1999 1'b0;
	in = #1334 1'b1;
	in = #1999 1'b0;
	in = #1334 1'b1;
	in = #2389 1'b0;
	in = #4467 1'b1;
	in = #2199 1'b0;
	in = #4467 1'b1;
	in = #2199 1'b0;
	in = #4467 1'b1;
	in = #543 1'b0;
	in = #862 1'b1;
	in = #3800 1'b0;
	in = #8275 1'b1;
	# 2533;
	repeat(2)
	begin
		in = 1'b0;
		in = #4133 1'b1;
		# 2533;
	end
	in = 1'b0;
	in = #1798 1'b1;
	in = #3200 1'b0;
	in = #6200 1'b1;
	# 362;
	repeat(2)
	begin
		in = 1'b0;
		in = #2134 1'b1;
		# 1199;
	end
	in = 1'b0;
	in = #2134 1'b1;
	in = #1402 1'b0;
	in = #1734 1'b1;
	in = #1599 1'b0;
	in = #1734 1'b1;
	in = #1599 1'b0;
	in = #1734 1'b1;
	in = #1036 1'b0;
	in = #2526 1'b1;
	# 3199;
	repeat(2)
	begin
		in = 1'b0;
		in = #3467 1'b1;
		# 3199;
	end
	in = 1'b0;
	in = #1274 1'b1;
	in = #2300 1'b0;
	in = #2700 1'b1;
	in = #2300 1'b0;
	in = #3121 1'b1;
	in = #4800 1'b0;
	in = #5200 1'b1;
	in = #4800 1'b0;
	in = #4448 1'b1;
	in = #452 1'b0;
	in = #12200 1'b1;
	in = #7348 1'b0;
	in = #2104 1'b1;
	in = #1750 1'b0;
	in = #3250 1'b1;
	in = #1750 1'b0;
	in = #1146 1'b1;
	# 3329;
	repeat(2)
	begin
		in = 1'b0;
		in = #2800 1'b1;
		# 3866;
	end
	in = 1'b0;
	in = #2800 1'b1;
	in = #863 1'b0;
	in = #3400 1'b1;
	in = #3266 1'b0;
	in = #3400 1'b1;
	in = #3266 1'b0;
	in = #3400 1'b1;
	in = #2944 1'b0;
	in = #1365 1'b1;
	# 1599;
	repeat(2)
	begin
		in = 1'b0;
		in = #1734 1'b1;
		# 1599;
	end
	in = 1'b0;
	in = #370 1'b1;
	# 611;
	repeat(2)
	begin
		in = 1'b0;
		in = #2234 1'b1;
		# 1099;
	end
	in = 1'b0;
	in = #2234 1'b1;
	in = #2113 1'b0;
	in = #6200 1'b1;
	in = #8457 1'b0;
	in = #10400 1'b1;
	in = #3319 1'b0;
	in = #513 1'b1;
	# 1133;
	repeat(2)
	begin
		in = 1'b0;
		in = #2200 1'b1;
		# 1133;
	end
	in = 1'b0;
	in = #4006 1'b1;
	in = #4300 1'b0;
	in = #4003 1'b1;
	# 1133;
	repeat(2)
	begin
		in = 1'b0;
		in = #2200 1'b1;
		# 1133;
	end
	in = 1'b0;
	in = #1580 1'b1;
	in = #1242 1'b0;
	in = #3500 1'b1;
	in = #1500 1'b0;
	in = #3500 1'b1;
	in = #1200 1'b0;
	in = #2134 1'b1;
	in = #1199 1'b0;
	in = #2134 1'b1;
	in = #1199 1'b0;
	in = #2134 1'b1;
	in = #3685 1'b0;
	in = #5600 1'b1;
	in = #4400 1'b0;
	in = #5600 1'b1;
	in = #3380 1'b0;
	in = #2500 1'b1;
	in = #2500 1'b0;
	in = #2500 1'b1;
	in = #93 1'b0;
	in = #157 1'b1;
	in = #4600 1'b0;
	in = #5400 1'b1;
	in = #4600 1'b0;
	in = #5243 1'b1;
	# 49;
	repeat(2)
	begin
		in = 1'b0;
		in = #1634 1'b1;
		# 1699;
	end
	in = 1'b0;
	in = #1634 1'b1;
	in = #1651 1'b0;
	in = #427 1'b1;
	in = #7400 1'b0;
	in = #12284 1'b1;
	# 1066;
	repeat(2)
	begin
		in = 1'b0;
		in = #2267 1'b1;
		# 1066;
	end
	in = 1'b0;
	in = #2157 1'b1;
	# 1294;
	repeat(2)
	begin
		in = 1'b0;
		in = #1634 1'b1;
		# 1699;
	end
	in = 1'b0;
	in = #1634 1'b1;
	in = #3802 1'b0;
	in = #5800 1'b1;
	in = #4200 1'b0;
	in = #5800 1'b1;
	in = #804 1'b0;
	in = #2225 1'b1;
	in = #7400 1'b0;
	in = #16971 1'b1;
	in = #3400 1'b0;
	in = #6600 1'b1;
	in = #3400 1'b0;
	in = #4 1'b1;
	in = #827 1'b0;
	in = #2400 1'b1;
	in = #2600 1'b0;
	in = #2400 1'b1;
	in = #5117 1'b0;
	in = #5700 1'b1;
	in = #4300 1'b0;
	in = #5700 1'b1;
	in = #2509 1'b0;
	in = #6000 1'b1;
	in = #4236 1'b0;
	in = #4533 1'b1;
	in = #2133 1'b0;
	in = #4533 1'b1;
	in = #2133 1'b0;
	in = #4533 1'b1;
	in = #346 1'b0;
	in = #1556 1'b1;
	# 1566;
	repeat(2)
	begin
		in = 1'b0;
		in = #1767 1'b1;
		# 1566;
	end
	in = 1'b0;
	in = #212 1'b1;
	in = #2906 1'b0;
	in = #5500 1'b1;
	in = #4500 1'b0;
	in = #5500 1'b1;
	in = #4115 1'b0;
	in = #8200 1'b1;
	in = #11830 1'b0;
	in = #5400 1'b1;
	in = #2049 1'b0;
	in = #2542 1'b1;
	in = #2400 1'b0;
	in = #2600 1'b1;
	in = #2400 1'b0;
	in = #58 1'b1;
	# 1777;
	repeat(2)
	begin
		in = 1'b0;
		in = #4533 1'b1;
		# 2133;
	end
	in = 1'b0;
	in = #4533 1'b1;
	in = #1218 1'b0;
	in = #6300 1'b1;
	in = #3700 1'b0;
	in = #6300 1'b1;
	in = #3068 1'b0;
	in = #4067 1'b1;
	in = #2599 1'b0;
	in = #4067 1'b1;
	in = #2599 1'b0;
	in = #4067 1'b1;
	in = #2373 1'b0;
	in = #3748 1'b1;
	in = #4000 1'b0;
	in = #6184 1'b1;
	in = #4000 1'b0;
	in = #6000 1'b1;
	in = #4000 1'b0;
	in = #2406 1'b1;
	# 1199;
	repeat(2)
	begin
		in = 1'b0;
		in = #2134 1'b1;
		# 1199;
	end
	in = 1'b0;
	in = #2618 1'b1;
	# 1033;
	repeat(2)
	begin
		in = 1'b0;
		in = #2300 1'b1;
		# 1033;
	end
	in = 1'b0;
	in = #2923 1'b1;
	in = #3400 1'b0;
	in = #5419 1'b1;
	# 1199;
	repeat(2)
	begin
		in = 1'b0;
		in = #2134 1'b1;
		# 1199;
	end
	in = 1'b0;
	in = #9157 1'b1;
	in = #8200 1'b0;
	in = #7560 1'b1;
	# 3199;
	repeat(2)
	begin
		in = 1'b0;
		in = #3467 1'b1;
		# 3199;
	end
	in = 1'b0;
	in = #425 1'b1;
	in = #1846 1'b0;
	in = #5500 1'b1;
	in = #8240 1'b0;
	in = #9000 1'b1;
	in = #5414 1'b0;
	in = #5679 1'b1;
	in = #3300 1'b0;
	in = #6700 1'b1;
	in = #3300 1'b0;
	in = #1021 1'b1;
	in = #2263 1'b0;
	in = #5600 1'b1;
	in = #2137 1'b0;
	in = #481 1'b1;
	# 2266;
	repeat(2)
	begin
		in = 1'b0;
		in = #4400 1'b1;
		# 2266;
	end
	in = 1'b0;
end 

// sys_clk
initial
begin
	sys_clk = 1'b1;
	# 10000;
	repeat(49)
	begin
		sys_clk = 1'b0;
		sys_clk = #10000 1'b1;
		# 10000;
	end
	sys_clk = 1'b0;
end 

// sys_rst_n
initial
begin
	sys_rst_n = 1'b1;
	sys_rst_n = #60000 1'b0;
	sys_rst_n = #20000 1'b1;
	sys_rst_n = #40000 1'b0;
	sys_rst_n = #140000 1'b1;
	sys_rst_n = #20000 1'b0;
	sys_rst_n = #40000 1'b1;
	sys_rst_n = #20000 1'b0;
	sys_rst_n = #60000 1'b1;
	sys_rst_n = #20000 1'b0;
	sys_rst_n = #40000 1'b1;
	sys_rst_n = #20000 1'b0;
	sys_rst_n = #20000 1'b1;
	sys_rst_n = #80000 1'b0;
	sys_rst_n = #20000 1'b1;
	sys_rst_n = #40000 1'b0;
	sys_rst_n = #80000 1'b1;
	sys_rst_n = #20000 1'b0;
	sys_rst_n = #160000 1'b1;
end 

flip_flop_vlg_sample_tst tb_sample (
	.in(in),
	.sys_clk(sys_clk),
	.sys_rst_n(sys_rst_n),
	.sampler_tx(sampler)
);

flip_flop_vlg_check_tst tb_out(
	.out(out),
	.sampler_rx(sampler)
);
endmodule

